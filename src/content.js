// AIDEN Chrome Extension Content Script

const OBSERVER_CONFIG = {
  childList: true,
  subtree: true
};

let currentPostId = null;
let responseStatus = 'idle';
let aidenResponse = null;

function extractPostId() {
  const postIdMatch = window.location.pathname.match(/post\/(\d+)/) || 
                     window.location.href.match(/cid=(\d+)/);
  return postIdMatch ? postIdMatch[1] : null;
}

function extractPostData() {
  try {
    const title = document.querySelector('#postViewSummaryId')?.innerText?.trim();
    const content = document.querySelector('.render-html-content')?.innerText?.trim();
    const tagButtons = [...document.querySelectorAll('.folder_selector .folder_button')];
    const tags = tagButtons.map(btn => btn.innerText.trim());
    const postId = extractPostId();
    const url = window.location.href;

    if (postId && title && content) {
      return { postId, title, content, tags, url };
    }
    return null;
  } catch (err) {
    console.error('[AIDEN] Error extracting post data:', err);
    return null;
  }
}

function insertAidenResponseToIframe(answer) {
  const frame = document.getElementById("i_answer_edit_ifr");
  const iframeDoc = frame?.contentDocument || frame?.contentWindow?.document;
  const body = iframeDoc?.body;
  if (body) {
    body.innerHTML = `<b>❗️This is the response generated by AI. TAs please review the answer carefully before submitting it.❗️</b><br><br>${answer}`;
  } else {
    alert("Could not insert: instructor editor iframe not found");
  }
}

function insertAidenResponse() {
  if (!aidenResponse) {
    alert('No response available. Please try again.');
    return;
  }
  insertAidenResponseToIframe(aidenResponse.output || aidenResponse.answer || '');
}

function showAidenReasoning() {
  if (!aidenResponse || !aidenResponse.reflection) {
    alert('No reasoning available for this response.');
    return;
  }

  const modal = document.createElement('div');
  modal.className = 'aiden-modal';
  modal.innerHTML = `
    <div class="aiden-modal-content">
      <div class="aiden-modal-header">
        <h3>AIDEN Reasoning</h3>
        <button class="aiden-modal-close">&times;</button>
      </div>
      <div class="aiden-modal-body">
        <pre>${aidenResponse.reflection}</pre>
      </div>
      <div class="aiden-modal-footer">
        <button class="aiden-modal-close-btn">Close</button>
      </div>
    </div>
  `;

  document.body.appendChild(modal);
  modal.querySelectorAll('.aiden-modal-close, .aiden-modal-close-btn').forEach(el => {
    el.addEventListener('click', () => modal.remove());
  });
  modal.addEventListener('click', e => {
    if (e.target === modal) modal.remove();
  });
}

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "getQuestionData") {
    const postData = extractPostData();
    sendResponse(postData || null);
    return true;
  }

  if (request.action === "insertAidenResponse") {
    const { postId, title, tags, content, url } = request;
  
    chrome.runtime.sendMessage({
      action: "proxyFetch",
      endpoint: `/get_response/${postId}`,
      method: "GET"
    }, (data) => {
      if (data?.response) {
        aidenResponse = data.response;
        insertAidenResponse();
      } else {
        console.log("[AIDEN] No response found, triggering backend generation...");
        chrome.runtime.sendMessage({
          action: "triggerGeneration",
          payload: {
            post_id: postId,
            llm_input: `Title: ${title}\nTags: ${tags.join(', ')}\nContent: ${content}`,
            metadata: {
              tags,
              url
            }
          }
        });
      }
    });
  }
  

  if (request.action === 'responseReady') {
    aidenResponse = request.data.response;
    responseStatus = 'ready';
    const button = document.getElementById('aiden-button');
    if (button) {
      button.innerHTML = '<i class="icon-ok"></i> Insert Response';
      button.disabled = false;
      button.removeEventListener('click', insertAidenResponse);
      button.addEventListener('click', insertAidenResponse);
    }
  }
});

const observer = new MutationObserver(() => {
  const newPostId = extractPostId();
  if (newPostId !== currentPostId) {
    currentPostId = newPostId;
  }
});

observer.observe(document.body, OBSERVER_CONFIG);

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => observer.observe(document.body, OBSERVER_CONFIG));
} else {
  observer.observe(document.body, OBSERVER_CONFIG);
}

window.addEventListener('beforeunload', () => {
  observer.disconnect();
});